import React, { useState, useEffect } from 'react';
import { productService } from '../services/productService';

const ProductsPage = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    try {
      setLoading(true);
      setError('');
      const data = await productService.getProducts();
      console.log('üîç Pobrane produkty:', data);
      setProducts(Array.isArray(data) ? data : []);
    } catch (err) {
      console.error('‚ùå B≈ÇƒÖd pobierania produkt√≥w:', err);
      setError('B≈ÇƒÖd podczas pobierania produkt√≥w: ' + err.message);
      setProducts([]);
    } finally {
      setLoading(false);
    }
  };

  const filteredProducts = Array.isArray(products) ? products.filter(product =>
    product.nazwa?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    product.kod_produktu?.includes(searchTerm) ||
    product.ean?.includes(searchTerm) ||
    product.kategoria?.toLowerCase().includes(searchTerm.toLowerCase())
  ) : [];

  if (loading) {
    return (
      <div style={{ padding: '2rem', backgroundColor: '#f8f9fa', minHeight: '100vh' }}>
        <div className="text-center">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">≈Åadowanie...</span>
          </div>
          <p className="mt-3">≈Åadowanie produkt√≥w...</p>
        </div>
      </div>
    );
  }

  return (
    <div style={{ padding: '2rem', backgroundColor: '#f8f9fa', minHeight: '100vh' }}>
      <div className="container-fluid">
        {/* Header */}
        <div className="d-flex justify-content-between align-items-center mb-4">
          <h1 className="h3 mb-0">
            <i className="fas fa-box-open me-2 text-primary"></i>
            Produkty
          </h1>
        </div>

        {/* Search Bar */}
        <div className="row mb-4">
          <div className="col-md-6">
            <div className="input-group">
              <span className="input-group-text">
                <i className="fas fa-search"></i>
              </span>
              <input
                type="text"
                className="form-control"
                placeholder="Szukaj produkt√≥w..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>
        </div>

        {/* Error Message */}
        {error && (
          <div className="alert alert-danger" role="alert">
            <i className="fas fa-exclamation-triangle me-2"></i>
            {error}
          </div>
        )}

        {/* Products Table */}
        <div className="card shadow-sm">
          <div className="card-body">
            <div className="table-responsive">
              <table className="table table-hover">
                <thead className="table-light">
                  <tr>
                    <th>Nazwa</th>
                    <th>Kod produktu</th>
                    <th>EAN</th>
                    <th>Kategoria</th>
                    <th>Cena zakupu</th>
                    <th>Cena sprzeda≈ºy</th>
                    <th>VAT</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredProducts.length === 0 ? (
                    <tr>
                      <td colSpan="7" className="text-center py-4 text-muted">
                        {searchTerm ? 'Brak produkt√≥w pasujƒÖcych do wyszukiwania' : 'Brak produkt√≥w'}
                      </td>
                    </tr>
                  ) : (
                    filteredProducts.map(product => (
                      <tr key={product.id}>
                        <td>{product.nazwa}</td>
                        <td>{product.kod_produktu}</td>
                        <td>{product.ean}</td>
                        <td>{product.kategoria}</td>
                        <td>{product.cena_zakupu ? `${parseFloat(product.cena_zakupu).toFixed(2)} PLN` : '-'}</td>
                        <td>{product.cena || product.cena_sprzedazy ? `${parseFloat(product.cena || product.cena_sprzedazy).toFixed(2)} PLN` : '-'}</td>
                        <td>{product.stawka_vat ? `${product.stawka_vat}%` : '-'}</td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>

        {/* Statistics */}
        <div className="row mt-4">
          <div className="col-md-4">
            <div className="card bg-primary text-white">
              <div className="card-body">
                <div className="d-flex justify-content-between">
                  <div>
                    <h5 className="card-title">Wszystkie produkty</h5>
                    <h2 className="mb-0">{products.length}</h2>
                  </div>
                  <div>
                    <i className="fas fa-boxes fa-2x opacity-75"></i>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="col-md-4">
            <div className="card bg-success text-white">
              <div className="card-body">
                <div className="d-flex justify-content-between">
                  <div>
                    <h5 className="card-title">Wyszukane</h5>
                    <h2 className="mb-0">{filteredProducts.length}</h2>
                  </div>
                  <div>
                    <i className="fas fa-search fa-2x opacity-75"></i>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="col-md-4">
            <div className="card bg-info text-white">
              <div className="card-body">
                <div className="d-flex justify-content-between">
                  <div>
                    <h5 className="card-title">Kategorie</h5>
                    <h2 className="mb-0">
                      {new Set(products.map(p => p.kategoria).filter(Boolean)).size}
                    </h2>
                  </div>
                  <div>
                    <i className="fas fa-tags fa-2x opacity-75"></i>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductsPage;
