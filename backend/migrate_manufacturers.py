#!/usr/bin/env python3
"""
Migracja bazy danych - dodanie tabeli producent√≥w i pola uproszczonej nazwy
"""

import sqlite3
import sys
import os

def create_manufacturers_table(cursor):
    """Tworzy tabelƒô producent√≥w"""
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS producenci (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nazwa TEXT NOT NULL UNIQUE,
            opis TEXT,
            aktywny BOOLEAN DEFAULT 1,
            data_utworzenia DATETIME DEFAULT CURRENT_TIMESTAMP,
            data_modyfikacji DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    print("‚úì Tabela 'producenci' zosta≈Ça utworzona")

def add_manufacturer_to_products(cursor):
    """Dodaje pole producent_id do tabeli products"""
    try:
        cursor.execute("ALTER TABLE products ADD COLUMN producent_id INTEGER")
        print("‚úì Dodano pole 'producent_id' do tabeli products")
    except sqlite3.OperationalError as e:
        if "duplicate column name" in str(e).lower():
            print("‚úì Pole 'producent_id' ju≈º istnieje w tabeli products")
        else:
            raise e

def add_simplified_name_to_products(cursor):
    """Dodaje pole uproszczonej nazwy do tabeli products"""
    try:
        cursor.execute("ALTER TABLE products ADD COLUMN nazwa_uproszczona TEXT")
        print("‚úì Dodano pole 'nazwa_uproszczona' do tabeli products")
    except sqlite3.OperationalError as e:
        if "duplicate column name" in str(e).lower():
            print("‚úì Pole 'nazwa_uproszczona' ju≈º istnieje w tabeli products")
        else:
            raise e

def create_foreign_key_index(cursor):
    """Tworzy indeks dla klucza obcego producent_id"""
    cursor.execute("""
        CREATE INDEX IF NOT EXISTS idx_products_producent_id 
        ON products(producent_id)
    """)
    print("‚úì Indeks dla producent_id zosta≈Ç utworzony")

def insert_default_manufacturers(cursor):
    """Wstawia domy≈õlnych producent√≥w"""
    default_manufacturers = [
        ('Nie okre≈õlono', 'Domy≈õlny producent dla produkt√≥w bez okre≈õlonego producenta'),
        ('ALLNUTRITION', 'Suplementy diety i od≈ºywki'),
        ('TREC NUTRITION', 'Suplementy sportowe'),
        ('OLIMP', 'Suplementy i ≈ºywno≈õƒá funkcjonalna'),
        ('ACTIVLAB', 'Od≈ºywki sportowe'),
        ('BIOTECH USA', 'Suplementy sportowe'),
        ('SCITEC', 'Od≈ºywki dla sportowc√≥w')
    ]
    
    for nazwa, opis in default_manufacturers:
        try:
            cursor.execute(
                "INSERT INTO producenci (nazwa, opis) VALUES (?, ?)",
                (nazwa, opis)
            )
        except sqlite3.IntegrityError:
            # Producent ju≈º istnieje
            pass
    
    print("‚úì Dodano domy≈õlnych producent√≥w")

def migrate_existing_manufacturers(cursor):
    """Migruje istniejƒÖcych producent√≥w z nazw produkt√≥w"""
    print("üìã Analizujƒô nazwy produkt√≥w w poszukiwaniu producent√≥w...")
    
    # Pobierz wszystkie unikalne pierwsze s≈Çowa z nazw produkt√≥w
    cursor.execute("""
        SELECT DISTINCT 
            CASE 
                WHEN INSTR(name, ' ') > 0 
                THEN SUBSTR(name, 1, INSTR(name, ' ') - 1)
                ELSE name
            END as potential_manufacturer
        FROM products 
        WHERE name IS NOT NULL AND name != ''
        ORDER BY potential_manufacturer
    """)
    
    potential_manufacturers = cursor.fetchall()
    
    known_manufacturers = [
        'ALLNUTRITION', 'TREC', 'OLIMP', 'ACTIVLAB', 'BIOTECH', 'SCITEC', 
        'MUTANT', 'BSN', 'OPTIMUM', 'DYMATIZE', 'CELLUCOR', 'NUTREX',
        'MUSCLETECH', 'UNIVERSAL', 'WEIDER', 'GOLD', 'PURE', 'PRO',
        'KEVIN', 'LEVRONE', 'REAL', 'IRON', 'MUSCLE', 'ULTIMATE'
    ]
    
    added_count = 0
    for row in potential_manufacturers:
        potential = row[0].upper()
        
        # Sprawd≈∫ czy to mo≈ºe byƒá producent (wiƒôcej ni≈º 2 znaki i w znanej li≈õcie)
        if len(potential) > 2 and any(known in potential for known in known_manufacturers):
            try:
                cursor.execute(
                    "INSERT INTO producenci (nazwa, opis) VALUES (?, ?)",
                    (potential, f"Producent zidentyfikowany automatycznie z nazw produkt√≥w")
                )
                added_count += 1
            except sqlite3.IntegrityError:
                # Producent ju≈º istnieje
                pass
    
    print(f"‚úì Dodano {added_count} producent√≥w zidentyfikowanych z nazw produkt√≥w")

def run_migration():
    """Uruchamia pe≈ÇnƒÖ migracjƒô"""
    db_path = 'kupony.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå Nie znaleziono bazy danych: {db_path}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        print("üöÄ Rozpoczynam migracjƒô bazy danych...")
        print("=" * 50)
        
        # Wykonaj migracjƒô
        create_manufacturers_table(cursor)
        add_manufacturer_to_products(cursor)
        add_simplified_name_to_products(cursor)
        create_foreign_key_index(cursor)
        insert_default_manufacturers(cursor)
        migrate_existing_manufacturers(cursor)
        
        # Zatwierd≈∫ zmiany
        conn.commit()
        
        print("=" * 50)
        print("‚úÖ Migracja zako≈Ñczona pomy≈õlnie!")
        
        # Poka≈º statystyki
        cursor.execute("SELECT COUNT(*) as count FROM producenci")
        manufacturers_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) as count FROM products")
        products_count = cursor.fetchone()[0]
        
        print(f"üìä Statystyki:")
        print(f"   ‚Ä¢ Producenci: {manufacturers_count}")
        print(f"   ‚Ä¢ Produkty: {products_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd podczas migracji: {e}")
        return False
    finally:
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    if run_migration():
        sys.exit(0)
    else:
        sys.exit(1)
